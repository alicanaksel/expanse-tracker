1) High-Level Flow (Application Lifecycle)

+----------------------+
| Start (python app.py)|
+----------+-----------+
           |
           v
   +---------------+
   | boot():       |
   | - ensure users|
   | - ensure data |
   +-------+-------+
           |
           v
   +---------------+
   | go_auth()     |
   | state="AUTH"  |
   +-------+-------+
           |
           v
   +----------------------------+
   | DEMO CLI Main Loop         |
   | (state-driven menu)        |
   +------+---------------------+
          |   (state == "AUTH")    (state == "HOME")
          |                         |
          |                         v
          v                  +--------------+
   +--------------+          | HOME Menu    |
   | AUTH Menu    |          | - Add        |
   | - Register   |          | - List       |
   | - Login      |          | - Logout     |
   | - Exit       |          | - Exit       |
   +------+-------+          +------+-------+
          |                         |
          | (Register/Login OK)     | (Logout)
          +-----------+-------------+------+
                      |                    |
                      v                    v
                +-----------+        +-----------+
                | go_home() |        | go_auth() |
                | state=HOME|        | state=AUTH|
                +-----------+        +-----------+

                         (Exit anywhere -> program ends)

2) AUTH Menu (Register / Login)

+-----------------------------+
| AUTH Menu                   |
| 1) Register                 |
| 2) Login                    |
| 0) Exit                     |
+--------------+--------------+
               |
     +---------+-----------+
     |                     |
     v                     v
+----------+         +-----------+
| Register |         |  Login    |
+----+-----+         +-----+-----+
     |                     |
     | action_register(u,p)|  action_login(u,p)
     |  - register_user    |   - authenticate_user
     |  - ensure_user_dir  |   - if ok -> go_home
     v                     v
+----------+         +-----------+
| ok?      |         | ok?       |
+---+------+         +-----+-----+
    |                      |
yes v                      v no
+--------+            +---------+
| go_home|            |  print  |
| HOME   |            |  error  |
+--------+            +---------+

3) HOME Menu (Add / List / Logout)

+--------------------------------------+
| HOME Menu                            |
| 1) Add expense                       |
| 2) List expenses                     |
| 3) Logout                            |
| 0) Exit                              |
+---------+-------------+--------------+
          |             |       
          v             v       
   +------+-----+  +----+-------------------+
   | Add Flow   |  | List Flow             |
   +------------+  +-----------------------+
          |                    |
          |                    v
          |              (filters?) from_date/to_date/category
          |                    |
          |               list_expenses()
          |                    |
          v                    v
    add_expense()         print table
          |
          v
  print id + path

(3) Logout -> go_auth()
(0) Exit   -> end program

4) “Add Expense” Sub-Flow (Validation + Save)

User input: date? amount? category? desc? method? tags?

            +-----------------------------+
            | add_expense(username,payload)|
            +---------------+-------------+
                            |
      +---------------------+----------------------------------+
      |                                                        |
      v                                                        v
validate_date_iso(date or today)                        validate_amount_positive(amount)
      |                                                        |
      v                                                        v
validate_required_text(category,"category")               normalize_tags(tags)
      |                                                        |
      +----------------------------+---------------------------+
                                   |
                                   v
                         load_expenses(username)  -> items list
                                   |
                                   v
                         generate_expense_id() -> eid
                                   |
                                   v
                         items.append(new_expense_dict)
                                   |
                                   v
                         save_expenses(username, items)
                                   |
                                   v
                         return eid (for UI to print)


5) “List Expenses” Sub-Flow (Filter + Sort)

User input -> filters:
- from_date (YYYY-MM-DD)  [optional]
- to_date   (YYYY-MM-DD)  [optional]
- category  (exact)       [optional]

+--------------------------+
| list_expenses(username,f)|
+------------+-------------+
             |
             v
   items = load_expenses(username)
             |
             v
   if f.from_date:  keep where e.date >= from_date
   if f.to_date:    keep where e.date <= to_date
   if f.category:   keep where e.category == category
             |
             v
   sort by (date, id) DESC
             |
             v
   return items (UI prints a table)



6) Filesystem & Persistence (JSON)
Project Root
├── app.py
├── storage/
│   └── users.json           # { "users": [ { "username": "...", "password": "..." }, ... ] }
└── data/
    └── <username>/
        ├── expanses.json    # { "expenses": [ {id, date, amount, category, description, payment_method, tags[]}, ... ] }
        └── settings.json    # { "currency": "USD", "categories": [...] }  (created by ensure_user_dir_exists)

